<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Model Performance Spider Chart</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        .chart-container {
            position: relative;
            height: 500px;
            margin-bottom: 40px;
        }
        .description {
            margin-bottom: 30px;
            line-height: 1.6;
            color: #666;
        }
        .controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        .control-group {
            min-width: 200px;
        }
        .control-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .control-group select {
            width: 100%;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Model Performance Spider Chart</h1>
        
        <div class="description">
            <p>This spider chart shows the relative performance of different models across various evaluation tasks.
            Scores are normalized from 0 to 1 for each evaluation to allow for direct comparison.
            Use the dropdown below to select one or more models to view.</p>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label for="modelSelector">Select Models:</label>
                <select id="modelSelector" multiple size="4">
                    </select>
            </div>
        </div>
        
        <div class="chart-container">
            <canvas id="spiderChart"></canvas>
        </div>
    </div>

    <script>
        const allLabels = {{ labels_json }};
        const allDatasets = {{ datasets_json }};
        let chart;

        const backgroundColors = [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)',
            'rgba(199, 199, 199, 0.2)'
        ];
        const borderColors = [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)',
            'rgba(199, 199, 199, 1)'
        ];

        function populateModelSelector() {
            const selector = document.getElementById('modelSelector');
            allDatasets.forEach(dataset => {
                const option = document.createElement('option');
                option.value = dataset.label;
                option.textContent = dataset.label;
                selector.appendChild(option);
            });
        }
        
        function updateChart() {
            const selector = document.getElementById('modelSelector');
            const selectedModels = Array.from(selector.selectedOptions).map(option => option.value);
            
            if (chart) {
                chart.destroy();
            }

            const filteredDatasets = allDatasets.filter(d => selectedModels.includes(d.label)).map((dataset, index) => {
                return {
                    label: dataset.label,
                    data: dataset.data,
                    backgroundColor: backgroundColors[index % backgroundColors.length],
                    borderColor: borderColors[index % borderColors.length],
                    pointBackgroundColor: borderColors[index % borderColors.length],
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: borderColors[index % borderColors.length],
                    borderWidth: 1
                };
            });

            if (filteredDatasets.length === 0) {
                return;
            }
            
            const ctx = document.getElementById('spiderChart').getContext('2d');
            chart = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: allLabels,
                    datasets: filteredDatasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                display: false
                            },
                            suggestedMin: 0,
                            suggestedMax: 1,
                            ticks: {
                                display: false
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Model Performance Comparison'
                        }
                    }
                }
            });
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            populateModelSelector();
            
            document.getElementById('modelSelector').addEventListener('change', updateChart);
            
            // Auto-select and display all models on load
            const selector = document.getElementById('modelSelector');
            Array.from(selector.options).forEach(option => option.selected = true);
            updateChart();
        });
    </script>
</body>
</html>